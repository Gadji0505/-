Конечно, вот более подробная и развернутая версия отчета по лабораторной работе №2, соответствующая требованиям и основанная на вашем исходном документе.

```docx
МИНИСТЕРСТВО НАУКИ И ВЫСШЕГО ОБРАЗОВАНИЯ РОССИЙСКОЙ ФЕДЕРАЦИИ

Федеральное государственное бюджетное образовательное учреждение
высшего образования

**«КУБАНСКИЙ ГОСУДАРСТВЕННЫЙ УНИВЕРСИТЕТ»**
**(ФГБОУ ВО «КубГУ»)**

**Факультет компьютерных технологий и прикладной математики**
**Кафедра информационных технологий**

**ОТЧЕТ**
о выполнении лабораторной работы №2
по дисциплине «Программная инженерия»

Выполнил студент группы МО32/1
________________ Г-А.Ш.Шурпаев

Направление подготовки 02.03.03 Математическое обеспечение и администрирование информационных систем
Курс 3

Отчет принял кандидат педагогических наук, доцент
________________ Н. Ю. Добровольская

Краснодар
2025 г.

# СОДЕРЖАНИЕ

Введение 3
1. Системное описание существующих программных решений 4
   1.1. Специализированное Java-приложение на базе Spring Boot 4
   1.2. Универсальная ERP-система Apache OFBiz 6
2. Сравнительная характеристика программных продуктов 8
3. Вывод о возможности применения рассмотренных решений 11
Заключение 12

# ВВЕДЕНИЕ

**Тема:** анализ существующих подобных программных решений.

**Цель:** освоение методики системного анализа программных решений поставленной задачи и выработка навыков анализа существующих программных продуктов на российском и зарубежном рынках.

**Индивидуальная тема:** автоматизация бизнес-процесса продажи автомобиля в автосалоне с использованием Java-технологий.

**Задачи:**
1.  Выполнить системное описание существующих программных решений (не менее двух), которые могут быть применены в заданной предметной области.
2.  Выделить основные преимущества и недостатки представленных решений.
3.  Выполнить сравнительную характеристику описанных ПП по заданным показателям.
4.  Сделать вывод о возможности и целесообразности использования этих решений на выбранном объекте автоматизации.

# 1. СИСТЕМНОЕ ОПИСАНИЕ СУЩЕСТВУЮЩИХ ПРОГРАММНЫХ РЕШЕНИЙ

## 1.1. Специализированное Java-приложение на базе Spring Boot

**Назначение системы:** Разработка специализированного веб-приложения для комплексной автоматизации бизнес-процессов автосалона, включая учет автомобилей, управление клиентской базой, обработку заявок, оформление договоров купли-продажи и формирование отчетности.

**Элементы системы и их взаимосвязи:**
Система построена по модульному принципу. Ключевые модули:
*   **Модуль учета автомобилей:** Управление поступлением, состоянием (на складе, продано, забронировано), комплектациями и ценами.
*   **CRM-модуль:** Ведение базы клиентов, история взаимодействий, статус заявок.
*   **Модуль сделок:** Оформление договоров, отслеживание этапов продажи (заявка, согласование, оплата, передача).
*   **Отчетный модуль:** Формирование дневных отчетов о продажах, анализ популярности моделей, финансовая отчетность.
*   **Модуль аутентификации и авторизации:** Разграничение прав доступа для ролей «Менеджер», «Кассир», «Руководитель».

**Функционально-структурная схема:**
```
[Веб-браузер клиента]
        |
        v
[Контроллеры Spring MVC]
        |
        v
[Сервисный слой (бизнес-логика)]
        |
        v
[Слой доступа к данным (Spring Data JPA)]
        |
        v
[База данных (MySQL/PostgreSQL)]
```

**Допустимые режимы работы:**
*   Многопользовательский веб-доступ через браузер.
*   Одновременная работа нескольких менеджеров с единой базой данных.
*   Поддержка транзакций при оформлении сделок для обеспечения целостности данных.

**Преимущества:**
*   **Гибкость и адаптируемость:** Архитектура и функционал полностью ориентированы на специфику работы автосалона, что позволяет реализовать именно те процессы, которые необходимы.
*   **Современный и интуитивный интерфейс:** Использование современных фреймворков (Thymeleaf, Bootstrap) позволяет создать удобный и понятный интерфейс для пользователей с разным уровнем подготовки.
*   **Простота расширения и модификации:** Модульная архитектура и использование Spring Boot облегчают добавление нового функционала (например, интеграция с онлайн-оплатой или кредитными организациями).
*   **Полный контроль над кодом и данными:** Открытый исходный код позволяет в любой момент модифицировать систему и не зависеть от сторонних вендоров.

**Недостатки:**
*   **Требуются временные и человеческие ресурсы на разработку:** Создание системы «с нуля» — длительный процесс, требующий участия квалифицированных Java-разработчиков.
*   **Необходимость технического сопровождения:** Для поддержки, обновления и исправления ошибок требуется собственная IT-команда или привлечение подрядчика.
*   **Ограниченный начальный функционал:** На старте система может уступать по количеству «из коробки» готовых функций крупным ERP-решениям.

## 1.2. Универсальная ERP-система Apache OFBiz

**Назначение системы:** Apache OFBiz (Open For Business) — это масштабируемая фреймворко-ориентированная ERP-система с открытым исходным кодом, написанная на Java. Предназначена для автоматизации широкого спектра бизнес-процессов, включая управление заказами, складской учет, производство, управление финансами и CRM.

**Элементы системы и их взаимосвязи:**
OFBiz построен на основе набора взаимосвязанных компонентов (applications):
*   **Компонент управления заказами (Order Manager):** Обработка заказов на продажу и покупку.
*   **Компонент управления складом (Warehouse Manager):** Учет инвентаря, управление поставками и отгрузками.
*   **Компонент управления каталогом продукции (Catalog Manager):** Ведение каталога товаров/услуг, цен и акций.
*   **Компонент управления учетными записями (Accounting Manager):** Финансовый учет, управление счетами.
*   **Компонент CRM (Party Manager):** Управление информацией о клиентах, партнерах и контактах.

**Функционально-структурная схема:**
```
[Веб-интерфейс OFBiz]
        |
        v
[Компоненты OFBiz (Order, Warehouse, Party...)]
        |
        v
[Общий сервисный движок и модель данных (Entity Engine)]
        |
        v
[База данных (Поддерживает различные СУБД)]
```

**Допустимые режимы работы:**
*   Работа в качестве корпоративной информационной системы для средних и крупных предприятий.
*   Может использоваться как фреймворк для разработки собственных приложений поверх готовой инфраструктуры.

**Преимущества:**
*   **Мощный и комплексный функционал:** Охватывает практически все аспекты деятельности предприятия, предоставляя единое информационное пространство.
*   **Бесплатность (Open Source):** Отсутствие лицензионных отчислов, что значительно снижает первоначальные затраты.
*   **Большое и активное сообщество:** Доступна обширная документация, форумы поддержки и готовые модули.
*   **Высокая степень настраиваемости:** Позволяет кастомизировать бизнес-процессы, данные и интерфейсы под свои нужды.

**Недостатки:**
*   **Высокая сложность внедрения и настройки:** Требует глубоких знаний системы для адаптации под конкретный бизнес-процесс автосалона.
*   **Избыточность функционала для малого бизнеса:** Многие модули (например, управление производством) могут не использоваться в автосалоне, что усложняет интерфейс и обучение персонала.
*   **Сложность пользовательского интерфейса:** Интерфейс может показаться перегруженным и неудобным для сотрудников, которым необходим быстрый доступ к ограниченному набору функций (оформление сделки, проверка наличия).

# 2. СРАВНИТЕЛЬНАЯ ХАРАКТЕРИСТИКА ПРОГРАММНЫХ ПРОДУКТОВ

*Таблица 2.1 – Сравнительная характеристика программных продуктов*

| Показатель для сравнения       | Специализированное Java-приложение (Spring Boot) | Универсальная ERP-система (Apache OFBiz) |
|--------------------------------|---------------------------------------------------|------------------------------------------|
| **Назначение системы**         | Целевая автоматизация продаж в автосалоне        | Универсальная автоматизация бизнеса (ERP) |
| **Эффективность системы**      | Высокая, оптимизирована под конкретные задачи    | Высокая в рамках своей парадигмы, но может быть избыточной |
| **Гибкость системы**           | Очень высокая, полный контроль над кодом         | Высокая, но ограничена архитектурой фреймворка |
| **Защищенность системы**       | Зависит от реализации; можно использовать Spring Security | Встроенные механизмы безопасности, проверенные сообществом |
| **Живучесть системы**          | Зависит от архитектуры и квалификации команды    | Высокая, отказоустойчивая архитектура |
| **Надежность системы**         | Зависит от тестирования и опыта разработчиков    | Очень высокая, используется в enterprise-среде |
| **Открытость системы**         | Полная (открытый код), легкая интеграция через API | Полная (открытый код) |
| **Оптимальность использования ресурсов** | Высокая, используются только необходимые компоненты | Средняя, могут загружаться неиспользуемые модули |
| **Удобство пользовательского интерфейса** | Простой, современный, ориентированный на пользователя | Сложный, требует обучения, ориентирован на функциональность |
| **Стоимость системы (разработка/внедрение)** | Затраты на разработку (150-300 тыс. руб.) | Бесплатная лицензия, но высокие затраты на внедрение и кастомизацию (200-500 тыс. руб.) |
| **Стоимость тех. поддержки**   | Зависит от команды (20-50 тыс. руб./мес)         | Сообщество / дорогостоящие контракты с интеграторами (30-70 тыс. руб./мес) |
| **Эргономичность**             | Высокая, интерфейс проектируется под задачи пользователя | Средняя, стандартный интерфейс фреймворка |

*Таблица 2.2 – Количественные показатели для сравнения*

| Параметр                       | Специализированное Java-приложение | Apache OFBiz      |
|--------------------------------|-------------------------------------|-------------------|
| **Сроки внедрения**            | 2-4 месяца                          | 3-6 месяцев       |
| **Объем дискового пространства** | ~500 Мб (приложение + БД)          | ~1-2 Гб           |
| **Кол-во единиц техники (мин.)** | 1 сервер                           | 1 сервер          |
| **Рекомендуемый объем ОЗУ**    | 4-8 Гб                             | 8-16 Гб           |
| **Стоимость лицензии ПО**      | 0 руб.                             | 0 руб.            |
| **Требуемая квалификация персонала** | Java-разработчик, администратор БД | Специалист по OFBiz, администратор БД |

**Анализ сравнительной характеристики:**

Проведенное сравнение показывает, что оба решения имеют кардинально разные подходы. **Специализированное Java-приложение** демонстрирует превосходство по показателям, напрямую влияющим на удобство работы конечных пользователей (менеджеров, кассиров) и скорости решения их повседневных задач: *удобство интерфейса, эргономичность, оптимальность использования ресурсов*. Оно создается целенаправленно для автоматизации процесса продаж, описанного в лабораторной работе №1.

**Apache OFBiz**, в свою очередь, является мощным инструментом, но его сила — в универсальности и охвате всех бизнес-процессов предприятия. Для автосалона это приводит к *сложности интерфейса, избыточности функционала и более высоким затратам на внедрение и настройку*. Его применение оправдано, если автосалон является частью крупного холдинга, где необходима интеграция с другими отделами (логистика, бухгалтерия, сервисный центр) в рамках единой системы.

# 3. ВЫВОД О ВОЗМОЖНОСТИ ПРИМЕНЕНИЯ РАССМОТРЕННЫХ РЕШЕНИЙ

На основании проведенного системного и сравнительного анализа для автоматизации бизнес-процесса «Продажа автомобиля в автосалоне» **наиболее целесообразным и оптимальным является использование специализированного Java-приложения на базе Spring Boot**.

**Обоснование вывода:**

1.  **Соответствие целям автоматизации:** Разработанное «с нуля» приложение может быть точно спроектировано под бизнес-процессы, описанные в лабораторной работе №1, обеспечивая максимальное соответствие поставленным целям (ускорение оформления, минимизация ошибок, точный учет).
2.  **Оптимальность внедрения и затрат:** Несмотря на начальные затраты на разработку, общая стоимость владения (TCO) может оказаться ниже, чем у OFBiz, за счет более простого сопровождения, отсутствия необходимости в высокооплачиваемых узкоспециализированных OFBiz-разработчиках и меньших сроков внедрения.
3.  **Удобство и скорость настройки:** Система изначально будет иметь простой и понятный интерфейс для сотрудников автосалона, что сократит время на их обучение и повысит оперативность работы. Внесение точечных изменений в логику приложения силами Java-разработчика осуществляется быстрее и проще, чем переконфигурирование сложных модулей OFBiz.
4.  **Перспективы развития:** Модульная архитектура Spring Boot позволяет постепенно наращивать функционал (например, добавить модуль онлайн-записи на тест-драйв, интеграцию с сайтом, мобильное приложение для менеджеров), не перестраивая всю систему.

**Apache OFBiz** может рассматриваться как альтернатива для крупных автомобильных дилерских центров с диверсифицированной деятельностью, где критически важна глубокая интеграция управления продажами, складом, финансами и сервисом. Однако для типового автосалона среднего размера его использование представляется избыточным и экономически неоптимальным.

# ЗАКЛЮЧЕНИЕ

В результате выполнения лабораторной работы №2 был проведен комплексный анализ двух программных решений для автоматизации продаж в автосалоне, реализованных на платформе Java. Было выполнено системное описание специализированного приложения на Spring Boot и универсальной ERP-системы Apache OFBiz, выделены их ключевые преимущества и недостатки.

Проведенная сравнительная характеристика по широкому спектру показателей (от назначения и эффективности до стоимости и эргономичности) наглядно продемонстрировала, что для целевого объекта автоматизации – автосалона – оптимальным решением является разработка собственного Java-приложения. Данный выбор обеспечит необходимую гибкость, ориентированность на конкретные бизнес-процессы, удобство для пользователей и оптимальность затрат на внедрение и поддержку.

Полученные результаты и выводы служат твердой основой для обоснования выбора технологического стека и архитектуры при переходе к этапу проектирования и разработки программного продукта в рамках последующих работ.
```Ы